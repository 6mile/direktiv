// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vorteil/direktiv/ent/timer"
)

// TimerCreate is the builder for creating a Timer entity.
type TimerCreate struct {
	config
	mutation *TimerMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (tc *TimerCreate) SetName(s string) *TimerCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetFn sets the "fn" field.
func (tc *TimerCreate) SetFn(s string) *TimerCreate {
	tc.mutation.SetFn(s)
	return tc
}

// SetCron sets the "cron" field.
func (tc *TimerCreate) SetCron(s string) *TimerCreate {
	tc.mutation.SetCron(s)
	return tc
}

// SetNillableCron sets the "cron" field if the given value is not nil.
func (tc *TimerCreate) SetNillableCron(s *string) *TimerCreate {
	if s != nil {
		tc.SetCron(*s)
	}
	return tc
}

// SetOne sets the "one" field.
func (tc *TimerCreate) SetOne(t time.Time) *TimerCreate {
	tc.mutation.SetOne(t)
	return tc
}

// SetNillableOne sets the "one" field if the given value is not nil.
func (tc *TimerCreate) SetNillableOne(t *time.Time) *TimerCreate {
	if t != nil {
		tc.SetOne(*t)
	}
	return tc
}

// SetData sets the "data" field.
func (tc *TimerCreate) SetData(b []byte) *TimerCreate {
	tc.mutation.SetData(b)
	return tc
}

// SetLast sets the "last" field.
func (tc *TimerCreate) SetLast(t time.Time) *TimerCreate {
	tc.mutation.SetLast(t)
	return tc
}

// SetNillableLast sets the "last" field if the given value is not nil.
func (tc *TimerCreate) SetNillableLast(t *time.Time) *TimerCreate {
	if t != nil {
		tc.SetLast(*t)
	}
	return tc
}

// Mutation returns the TimerMutation object of the builder.
func (tc *TimerCreate) Mutation() *TimerMutation {
	return tc.mutation
}

// Save creates the Timer in the database.
func (tc *TimerCreate) Save(ctx context.Context) (*Timer, error) {
	var (
		err  error
		node *Timer
	)
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TimerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			node, err = tc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			mut = tc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TimerCreate) SaveX(ctx context.Context) *Timer {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (tc *TimerCreate) check() error {
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := tc.mutation.Name(); ok {
		if err := timer.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if _, ok := tc.mutation.Fn(); !ok {
		return &ValidationError{Name: "fn", err: errors.New("ent: missing required field \"fn\"")}
	}
	if v, ok := tc.mutation.Fn(); ok {
		if err := timer.FnValidator(v); err != nil {
			return &ValidationError{Name: "fn", err: fmt.Errorf("ent: validator failed for field \"fn\": %w", err)}
		}
	}
	return nil
}

func (tc *TimerCreate) sqlSave(ctx context.Context) (*Timer, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tc *TimerCreate) createSpec() (*Timer, *sqlgraph.CreateSpec) {
	var (
		_node = &Timer{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: timer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: timer.FieldID,
			},
		}
	)
	if value, ok := tc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timer.FieldName,
		})
		_node.Name = value
	}
	if value, ok := tc.mutation.Fn(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timer.FieldFn,
		})
		_node.Fn = value
	}
	if value, ok := tc.mutation.Cron(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: timer.FieldCron,
		})
		_node.Cron = value
	}
	if value, ok := tc.mutation.One(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: timer.FieldOne,
		})
		_node.One = value
	}
	if value, ok := tc.mutation.Data(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: timer.FieldData,
		})
		_node.Data = value
	}
	if value, ok := tc.mutation.Last(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: timer.FieldLast,
		})
		_node.Last = value
	}
	return _node, _spec
}

// TimerCreateBulk is the builder for creating many Timer entities in bulk.
type TimerCreateBulk struct {
	config
	builders []*TimerCreate
}

// Save creates the Timer entities in the database.
func (tcb *TimerCreateBulk) Save(ctx context.Context) ([]*Timer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Timer, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TimerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TimerCreateBulk) SaveX(ctx context.Context) []*Timer {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
