// Code generated by entc, DO NOT EDIT.

package timer

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/vorteil/direktiv/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Fn applies equality check predicate on the "fn" field. It's identical to FnEQ.
func Fn(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFn), v))
	})
}

// Cron applies equality check predicate on the "cron" field. It's identical to CronEQ.
func Cron(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCron), v))
	})
}

// One applies equality check predicate on the "one" field. It's identical to OneEQ.
func One(v time.Time) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOne), v))
	})
}

// Data applies equality check predicate on the "data" field. It's identical to DataEQ.
func Data(v []byte) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldData), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Timer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Timer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// FnEQ applies the EQ predicate on the "fn" field.
func FnEQ(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFn), v))
	})
}

// FnNEQ applies the NEQ predicate on the "fn" field.
func FnNEQ(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFn), v))
	})
}

// FnIn applies the In predicate on the "fn" field.
func FnIn(vs ...string) predicate.Timer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFn), v...))
	})
}

// FnNotIn applies the NotIn predicate on the "fn" field.
func FnNotIn(vs ...string) predicate.Timer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFn), v...))
	})
}

// FnGT applies the GT predicate on the "fn" field.
func FnGT(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFn), v))
	})
}

// FnGTE applies the GTE predicate on the "fn" field.
func FnGTE(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFn), v))
	})
}

// FnLT applies the LT predicate on the "fn" field.
func FnLT(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFn), v))
	})
}

// FnLTE applies the LTE predicate on the "fn" field.
func FnLTE(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFn), v))
	})
}

// FnContains applies the Contains predicate on the "fn" field.
func FnContains(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFn), v))
	})
}

// FnHasPrefix applies the HasPrefix predicate on the "fn" field.
func FnHasPrefix(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFn), v))
	})
}

// FnHasSuffix applies the HasSuffix predicate on the "fn" field.
func FnHasSuffix(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFn), v))
	})
}

// FnEqualFold applies the EqualFold predicate on the "fn" field.
func FnEqualFold(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFn), v))
	})
}

// FnContainsFold applies the ContainsFold predicate on the "fn" field.
func FnContainsFold(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFn), v))
	})
}

// CronEQ applies the EQ predicate on the "cron" field.
func CronEQ(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCron), v))
	})
}

// CronNEQ applies the NEQ predicate on the "cron" field.
func CronNEQ(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCron), v))
	})
}

// CronIn applies the In predicate on the "cron" field.
func CronIn(vs ...string) predicate.Timer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCron), v...))
	})
}

// CronNotIn applies the NotIn predicate on the "cron" field.
func CronNotIn(vs ...string) predicate.Timer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCron), v...))
	})
}

// CronGT applies the GT predicate on the "cron" field.
func CronGT(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCron), v))
	})
}

// CronGTE applies the GTE predicate on the "cron" field.
func CronGTE(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCron), v))
	})
}

// CronLT applies the LT predicate on the "cron" field.
func CronLT(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCron), v))
	})
}

// CronLTE applies the LTE predicate on the "cron" field.
func CronLTE(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCron), v))
	})
}

// CronContains applies the Contains predicate on the "cron" field.
func CronContains(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCron), v))
	})
}

// CronHasPrefix applies the HasPrefix predicate on the "cron" field.
func CronHasPrefix(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCron), v))
	})
}

// CronHasSuffix applies the HasSuffix predicate on the "cron" field.
func CronHasSuffix(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCron), v))
	})
}

// CronIsNil applies the IsNil predicate on the "cron" field.
func CronIsNil() predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCron)))
	})
}

// CronNotNil applies the NotNil predicate on the "cron" field.
func CronNotNil() predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCron)))
	})
}

// CronEqualFold applies the EqualFold predicate on the "cron" field.
func CronEqualFold(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCron), v))
	})
}

// CronContainsFold applies the ContainsFold predicate on the "cron" field.
func CronContainsFold(v string) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCron), v))
	})
}

// OneEQ applies the EQ predicate on the "one" field.
func OneEQ(v time.Time) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOne), v))
	})
}

// OneNEQ applies the NEQ predicate on the "one" field.
func OneNEQ(v time.Time) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOne), v))
	})
}

// OneIn applies the In predicate on the "one" field.
func OneIn(vs ...time.Time) predicate.Timer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOne), v...))
	})
}

// OneNotIn applies the NotIn predicate on the "one" field.
func OneNotIn(vs ...time.Time) predicate.Timer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOne), v...))
	})
}

// OneGT applies the GT predicate on the "one" field.
func OneGT(v time.Time) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOne), v))
	})
}

// OneGTE applies the GTE predicate on the "one" field.
func OneGTE(v time.Time) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOne), v))
	})
}

// OneLT applies the LT predicate on the "one" field.
func OneLT(v time.Time) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOne), v))
	})
}

// OneLTE applies the LTE predicate on the "one" field.
func OneLTE(v time.Time) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOne), v))
	})
}

// OneIsNil applies the IsNil predicate on the "one" field.
func OneIsNil() predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOne)))
	})
}

// OneNotNil applies the NotNil predicate on the "one" field.
func OneNotNil() predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOne)))
	})
}

// DataEQ applies the EQ predicate on the "data" field.
func DataEQ(v []byte) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldData), v))
	})
}

// DataNEQ applies the NEQ predicate on the "data" field.
func DataNEQ(v []byte) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldData), v))
	})
}

// DataIn applies the In predicate on the "data" field.
func DataIn(vs ...[]byte) predicate.Timer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldData), v...))
	})
}

// DataNotIn applies the NotIn predicate on the "data" field.
func DataNotIn(vs ...[]byte) predicate.Timer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Timer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldData), v...))
	})
}

// DataGT applies the GT predicate on the "data" field.
func DataGT(v []byte) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldData), v))
	})
}

// DataGTE applies the GTE predicate on the "data" field.
func DataGTE(v []byte) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldData), v))
	})
}

// DataLT applies the LT predicate on the "data" field.
func DataLT(v []byte) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldData), v))
	})
}

// DataLTE applies the LTE predicate on the "data" field.
func DataLTE(v []byte) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldData), v))
	})
}

// DataIsNil applies the IsNil predicate on the "data" field.
func DataIsNil() predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldData)))
	})
}

// DataNotNil applies the NotNil predicate on the "data" field.
func DataNotNil() predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldData)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Timer) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Timer) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Timer) predicate.Timer {
	return predicate.Timer(func(s *sql.Selector) {
		p(s.Not())
	})
}
