// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/vorteil/direktiv/ent/timer"
)

// Timer is the model entity for the Timer schema.
type Timer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Fn holds the value of the "fn" field.
	Fn string `json:"fn,omitempty"`
	// Cron holds the value of the "cron" field.
	Cron string `json:"cron,omitempty"`
	// One holds the value of the "one" field.
	One time.Time `json:"one,omitempty"`
	// Data holds the value of the "data" field.
	Data []byte `json:"data,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Timer) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case timer.FieldData:
			values[i] = new([]byte)
		case timer.FieldID:
			values[i] = new(sql.NullInt64)
		case timer.FieldName, timer.FieldFn, timer.FieldCron:
			values[i] = new(sql.NullString)
		case timer.FieldOne:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Timer", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Timer fields.
func (t *Timer) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case timer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case timer.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case timer.FieldFn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fn", values[i])
			} else if value.Valid {
				t.Fn = value.String
			}
		case timer.FieldCron:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cron", values[i])
			} else if value.Valid {
				t.Cron = value.String
			}
		case timer.FieldOne:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field one", values[i])
			} else if value.Valid {
				t.One = value.Time
			}
		case timer.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil {
				t.Data = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Timer.
// Note that you need to call Timer.Unwrap() before calling this method if this Timer
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Timer) Update() *TimerUpdateOne {
	return (&TimerClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Timer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Timer) Unwrap() *Timer {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Timer is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Timer) String() string {
	var builder strings.Builder
	builder.WriteString("Timer(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", name=")
	builder.WriteString(t.Name)
	builder.WriteString(", fn=")
	builder.WriteString(t.Fn)
	builder.WriteString(", cron=")
	builder.WriteString(t.Cron)
	builder.WriteString(", one=")
	builder.WriteString(t.One.Format(time.ANSIC))
	builder.WriteString(", data=")
	builder.WriteString(fmt.Sprintf("%v", t.Data))
	builder.WriteByte(')')
	return builder.String()
}

// Timers is a parsable slice of Timer.
type Timers []*Timer

func (t Timers) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
