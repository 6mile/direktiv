// Code generated by entc, DO NOT EDIT.

package subroutine

import (
	"entgo.io/ent/dialect/sql"
	"github.com/vorteil/direktiv/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CallerID applies equality check predicate on the "callerID" field. It's identical to CallerIDEQ.
func CallerID(v string) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCallerID), v))
	})
}

// Semaphore applies equality check predicate on the "semaphore" field. It's identical to SemaphoreEQ.
func Semaphore(v int) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSemaphore), v))
	})
}

// Memory applies equality check predicate on the "memory" field. It's identical to MemoryEQ.
func Memory(v string) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemory), v))
	})
}

// CallerIDEQ applies the EQ predicate on the "callerID" field.
func CallerIDEQ(v string) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCallerID), v))
	})
}

// CallerIDNEQ applies the NEQ predicate on the "callerID" field.
func CallerIDNEQ(v string) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCallerID), v))
	})
}

// CallerIDIn applies the In predicate on the "callerID" field.
func CallerIDIn(vs ...string) predicate.Subroutine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subroutine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCallerID), v...))
	})
}

// CallerIDNotIn applies the NotIn predicate on the "callerID" field.
func CallerIDNotIn(vs ...string) predicate.Subroutine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subroutine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCallerID), v...))
	})
}

// CallerIDGT applies the GT predicate on the "callerID" field.
func CallerIDGT(v string) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCallerID), v))
	})
}

// CallerIDGTE applies the GTE predicate on the "callerID" field.
func CallerIDGTE(v string) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCallerID), v))
	})
}

// CallerIDLT applies the LT predicate on the "callerID" field.
func CallerIDLT(v string) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCallerID), v))
	})
}

// CallerIDLTE applies the LTE predicate on the "callerID" field.
func CallerIDLTE(v string) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCallerID), v))
	})
}

// CallerIDContains applies the Contains predicate on the "callerID" field.
func CallerIDContains(v string) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCallerID), v))
	})
}

// CallerIDHasPrefix applies the HasPrefix predicate on the "callerID" field.
func CallerIDHasPrefix(v string) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCallerID), v))
	})
}

// CallerIDHasSuffix applies the HasSuffix predicate on the "callerID" field.
func CallerIDHasSuffix(v string) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCallerID), v))
	})
}

// CallerIDEqualFold applies the EqualFold predicate on the "callerID" field.
func CallerIDEqualFold(v string) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCallerID), v))
	})
}

// CallerIDContainsFold applies the ContainsFold predicate on the "callerID" field.
func CallerIDContainsFold(v string) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCallerID), v))
	})
}

// SemaphoreEQ applies the EQ predicate on the "semaphore" field.
func SemaphoreEQ(v int) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSemaphore), v))
	})
}

// SemaphoreNEQ applies the NEQ predicate on the "semaphore" field.
func SemaphoreNEQ(v int) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSemaphore), v))
	})
}

// SemaphoreIn applies the In predicate on the "semaphore" field.
func SemaphoreIn(vs ...int) predicate.Subroutine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subroutine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSemaphore), v...))
	})
}

// SemaphoreNotIn applies the NotIn predicate on the "semaphore" field.
func SemaphoreNotIn(vs ...int) predicate.Subroutine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subroutine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSemaphore), v...))
	})
}

// SemaphoreGT applies the GT predicate on the "semaphore" field.
func SemaphoreGT(v int) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSemaphore), v))
	})
}

// SemaphoreGTE applies the GTE predicate on the "semaphore" field.
func SemaphoreGTE(v int) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSemaphore), v))
	})
}

// SemaphoreLT applies the LT predicate on the "semaphore" field.
func SemaphoreLT(v int) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSemaphore), v))
	})
}

// SemaphoreLTE applies the LTE predicate on the "semaphore" field.
func SemaphoreLTE(v int) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSemaphore), v))
	})
}

// MemoryEQ applies the EQ predicate on the "memory" field.
func MemoryEQ(v string) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemory), v))
	})
}

// MemoryNEQ applies the NEQ predicate on the "memory" field.
func MemoryNEQ(v string) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMemory), v))
	})
}

// MemoryIn applies the In predicate on the "memory" field.
func MemoryIn(vs ...string) predicate.Subroutine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subroutine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMemory), v...))
	})
}

// MemoryNotIn applies the NotIn predicate on the "memory" field.
func MemoryNotIn(vs ...string) predicate.Subroutine {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subroutine(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMemory), v...))
	})
}

// MemoryGT applies the GT predicate on the "memory" field.
func MemoryGT(v string) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMemory), v))
	})
}

// MemoryGTE applies the GTE predicate on the "memory" field.
func MemoryGTE(v string) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMemory), v))
	})
}

// MemoryLT applies the LT predicate on the "memory" field.
func MemoryLT(v string) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMemory), v))
	})
}

// MemoryLTE applies the LTE predicate on the "memory" field.
func MemoryLTE(v string) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMemory), v))
	})
}

// MemoryContains applies the Contains predicate on the "memory" field.
func MemoryContains(v string) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMemory), v))
	})
}

// MemoryHasPrefix applies the HasPrefix predicate on the "memory" field.
func MemoryHasPrefix(v string) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMemory), v))
	})
}

// MemoryHasSuffix applies the HasSuffix predicate on the "memory" field.
func MemoryHasSuffix(v string) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMemory), v))
	})
}

// MemoryEqualFold applies the EqualFold predicate on the "memory" field.
func MemoryEqualFold(v string) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMemory), v))
	})
}

// MemoryContainsFold applies the ContainsFold predicate on the "memory" field.
func MemoryContainsFold(v string) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMemory), v))
	})
}

// SubroutineResponsesIsNil applies the IsNil predicate on the "subroutineResponses" field.
func SubroutineResponsesIsNil() predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSubroutineResponses)))
	})
}

// SubroutineResponsesNotNil applies the NotNil predicate on the "subroutineResponses" field.
func SubroutineResponsesNotNil() predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSubroutineResponses)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Subroutine) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Subroutine) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Subroutine) predicate.Subroutine {
	return predicate.Subroutine(func(s *sql.Selector) {
		p(s.Not())
	})
}
