// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/vorteil/direktiv/ent/server"
)

// Server is the model entity for the Server schema.
type Server struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty"`
	// ExtIP holds the value of the "extIP" field.
	ExtIP string `json:"extIP,omitempty"`
	// NatsPort holds the value of the "natsPort" field.
	NatsPort int `json:"natsPort,omitempty"`
	// MemberPort holds the value of the "memberPort" field.
	MemberPort int `json:"memberPort,omitempty"`
	// Added holds the value of the "added" field.
	Added time.Time `json:"added,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Server) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case server.FieldID, server.FieldNatsPort, server.FieldMemberPort:
			values[i] = &sql.NullInt64{}
		case server.FieldIP, server.FieldExtIP:
			values[i] = &sql.NullString{}
		case server.FieldAdded:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Server", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Server fields.
func (s *Server) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case server.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case server.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				s.IP = value.String
			}
		case server.FieldExtIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extIP", values[i])
			} else if value.Valid {
				s.ExtIP = value.String
			}
		case server.FieldNatsPort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field natsPort", values[i])
			} else if value.Valid {
				s.NatsPort = int(value.Int64)
			}
		case server.FieldMemberPort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field memberPort", values[i])
			} else if value.Valid {
				s.MemberPort = int(value.Int64)
			}
		case server.FieldAdded:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field added", values[i])
			} else if value.Valid {
				s.Added = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Server.
// Note that you need to call Server.Unwrap() before calling this method if this Server
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Server) Update() *ServerUpdateOne {
	return (&ServerClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Server entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Server) Unwrap() *Server {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Server is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Server) String() string {
	var builder strings.Builder
	builder.WriteString("Server(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", ip=")
	builder.WriteString(s.IP)
	builder.WriteString(", extIP=")
	builder.WriteString(s.ExtIP)
	builder.WriteString(", natsPort=")
	builder.WriteString(fmt.Sprintf("%v", s.NatsPort))
	builder.WriteString(", memberPort=")
	builder.WriteString(fmt.Sprintf("%v", s.MemberPort))
	builder.WriteString(", added=")
	builder.WriteString(s.Added.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Servers is a parsable slice of Server.
type Servers []*Server

func (s Servers) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
