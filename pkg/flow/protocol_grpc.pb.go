// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package flow

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DirektivFlowClient is the client API for DirektivFlow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirektivFlowClient interface {
	ReportActionResults(ctx context.Context, in *ReportActionResultsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Resume(ctx context.Context, in *ResumeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type direktivFlowClient struct {
	cc grpc.ClientConnInterface
}

func NewDirektivFlowClient(cc grpc.ClientConnInterface) DirektivFlowClient {
	return &direktivFlowClient{cc}
}

func (c *direktivFlowClient) ReportActionResults(ctx context.Context, in *ReportActionResultsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/flow.DirektivFlow/ReportActionResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *direktivFlowClient) Resume(ctx context.Context, in *ResumeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/flow.DirektivFlow/Resume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirektivFlowServer is the server API for DirektivFlow service.
// All implementations must embed UnimplementedDirektivFlowServer
// for forward compatibility
type DirektivFlowServer interface {
	ReportActionResults(context.Context, *ReportActionResultsRequest) (*empty.Empty, error)
	Resume(context.Context, *ResumeRequest) (*empty.Empty, error)
	mustEmbedUnimplementedDirektivFlowServer()
}

// UnimplementedDirektivFlowServer must be embedded to have forward compatible implementations.
type UnimplementedDirektivFlowServer struct {
}

func (UnimplementedDirektivFlowServer) ReportActionResults(context.Context, *ReportActionResultsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportActionResults not implemented")
}
func (UnimplementedDirektivFlowServer) Resume(context.Context, *ResumeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resume not implemented")
}
func (UnimplementedDirektivFlowServer) mustEmbedUnimplementedDirektivFlowServer() {}

// UnsafeDirektivFlowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirektivFlowServer will
// result in compilation errors.
type UnsafeDirektivFlowServer interface {
	mustEmbedUnimplementedDirektivFlowServer()
}

func RegisterDirektivFlowServer(s grpc.ServiceRegistrar, srv DirektivFlowServer) {
	s.RegisterService(&DirektivFlow_ServiceDesc, srv)
}

func _DirektivFlow_ReportActionResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportActionResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirektivFlowServer).ReportActionResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flow.DirektivFlow/ReportActionResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirektivFlowServer).ReportActionResults(ctx, req.(*ReportActionResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirektivFlow_Resume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirektivFlowServer).Resume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flow.DirektivFlow/Resume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirektivFlowServer).Resume(ctx, req.(*ResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DirektivFlow_ServiceDesc is the grpc.ServiceDesc for DirektivFlow service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DirektivFlow_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flow.DirektivFlow",
	HandlerType: (*DirektivFlowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportActionResults",
			Handler:    _DirektivFlow_ReportActionResults_Handler,
		},
		{
			MethodName: "Resume",
			Handler:    _DirektivFlow_Resume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/flow/protocol.proto",
}
