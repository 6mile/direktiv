// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vorteil/direktiv/pkg/secrets/ent/bucketsecret"
)

// BucketSecretCreate is the builder for creating a BucketSecret entity.
type BucketSecretCreate struct {
	config
	mutation *BucketSecretMutation
	hooks    []Hook
}

// SetNs sets the "ns" field.
func (bsc *BucketSecretCreate) SetNs(s string) *BucketSecretCreate {
	bsc.mutation.SetNs(s)
	return bsc
}

// SetName sets the "name" field.
func (bsc *BucketSecretCreate) SetName(s string) *BucketSecretCreate {
	bsc.mutation.SetName(s)
	return bsc
}

// SetSecret sets the "secret" field.
func (bsc *BucketSecretCreate) SetSecret(b []byte) *BucketSecretCreate {
	bsc.mutation.SetSecret(b)
	return bsc
}

// SetType sets the "type" field.
func (bsc *BucketSecretCreate) SetType(i int) *BucketSecretCreate {
	bsc.mutation.SetType(i)
	return bsc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (bsc *BucketSecretCreate) SetNillableType(i *int) *BucketSecretCreate {
	if i != nil {
		bsc.SetType(*i)
	}
	return bsc
}

// Mutation returns the BucketSecretMutation object of the builder.
func (bsc *BucketSecretCreate) Mutation() *BucketSecretMutation {
	return bsc.mutation
}

// Save creates the BucketSecret in the database.
func (bsc *BucketSecretCreate) Save(ctx context.Context) (*BucketSecret, error) {
	var (
		err  error
		node *BucketSecret
	)
	bsc.defaults()
	if len(bsc.hooks) == 0 {
		if err = bsc.check(); err != nil {
			return nil, err
		}
		node, err = bsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BucketSecretMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bsc.check(); err != nil {
				return nil, err
			}
			bsc.mutation = mutation
			node, err = bsc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bsc.hooks) - 1; i >= 0; i-- {
			mut = bsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bsc *BucketSecretCreate) SaveX(ctx context.Context) *BucketSecret {
	v, err := bsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (bsc *BucketSecretCreate) defaults() {
	if _, ok := bsc.mutation.GetType(); !ok {
		v := bucketsecret.DefaultType
		bsc.mutation.SetType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bsc *BucketSecretCreate) check() error {
	if _, ok := bsc.mutation.Ns(); !ok {
		return &ValidationError{Name: "ns", err: errors.New("ent: missing required field \"ns\"")}
	}
	if _, ok := bsc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := bsc.mutation.Secret(); !ok {
		return &ValidationError{Name: "secret", err: errors.New("ent: missing required field \"secret\"")}
	}
	if _, ok := bsc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New("ent: missing required field \"type\"")}
	}
	return nil
}

func (bsc *BucketSecretCreate) sqlSave(ctx context.Context) (*BucketSecret, error) {
	_node, _spec := bsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bsc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (bsc *BucketSecretCreate) createSpec() (*BucketSecret, *sqlgraph.CreateSpec) {
	var (
		_node = &BucketSecret{config: bsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: bucketsecret.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bucketsecret.FieldID,
			},
		}
	)
	if value, ok := bsc.mutation.Ns(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bucketsecret.FieldNs,
		})
		_node.Ns = value
	}
	if value, ok := bsc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bucketsecret.FieldName,
		})
		_node.Name = value
	}
	if value, ok := bsc.mutation.Secret(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: bucketsecret.FieldSecret,
		})
		_node.Secret = value
	}
	if value, ok := bsc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bucketsecret.FieldType,
		})
		_node.Type = value
	}
	return _node, _spec
}

// BucketSecretCreateBulk is the builder for creating many BucketSecret entities in bulk.
type BucketSecretCreateBulk struct {
	config
	builders []*BucketSecretCreate
}

// Save creates the BucketSecret entities in the database.
func (bscb *BucketSecretCreateBulk) Save(ctx context.Context) ([]*BucketSecret, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bscb.builders))
	nodes := make([]*BucketSecret, len(bscb.builders))
	mutators := make([]Mutator, len(bscb.builders))
	for i := range bscb.builders {
		func(i int, root context.Context) {
			builder := bscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BucketSecretMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bscb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bscb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bscb *BucketSecretCreateBulk) SaveX(ctx context.Context) []*BucketSecret {
	v, err := bscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
