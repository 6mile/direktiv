// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/vorteil/direktiv/pkg/secrets/ent/bucketsecret"
)

// BucketSecret is the model entity for the BucketSecret schema.
type BucketSecret struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Ns holds the value of the "ns" field.
	Ns string `json:"ns,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Secret holds the value of the "secret" field.
	Secret []byte `json:"secret,omitempty"`
	// Type holds the value of the "type" field.
	Type int `json:"type,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BucketSecret) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case bucketsecret.FieldSecret:
			values[i] = &[]byte{}
		case bucketsecret.FieldID, bucketsecret.FieldType:
			values[i] = &sql.NullInt64{}
		case bucketsecret.FieldNs, bucketsecret.FieldName:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type BucketSecret", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BucketSecret fields.
func (bs *BucketSecret) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bucketsecret.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bs.ID = int(value.Int64)
		case bucketsecret.FieldNs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ns", values[i])
			} else if value.Valid {
				bs.Ns = value.String
			}
		case bucketsecret.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				bs.Name = value.String
			}
		case bucketsecret.FieldSecret:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field secret", values[i])
			} else if value != nil {
				bs.Secret = *value
			}
		case bucketsecret.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				bs.Type = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this BucketSecret.
// Note that you need to call BucketSecret.Unwrap() before calling this method if this BucketSecret
// was returned from a transaction, and the transaction was committed or rolled back.
func (bs *BucketSecret) Update() *BucketSecretUpdateOne {
	return (&BucketSecretClient{config: bs.config}).UpdateOne(bs)
}

// Unwrap unwraps the BucketSecret entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bs *BucketSecret) Unwrap() *BucketSecret {
	tx, ok := bs.config.driver.(*txDriver)
	if !ok {
		panic("ent: BucketSecret is not a transactional entity")
	}
	bs.config.driver = tx.drv
	return bs
}

// String implements the fmt.Stringer.
func (bs *BucketSecret) String() string {
	var builder strings.Builder
	builder.WriteString("BucketSecret(")
	builder.WriteString(fmt.Sprintf("id=%v", bs.ID))
	builder.WriteString(", ns=")
	builder.WriteString(bs.Ns)
	builder.WriteString(", name=")
	builder.WriteString(bs.Name)
	builder.WriteString(", secret=")
	builder.WriteString(fmt.Sprintf("%v", bs.Secret))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", bs.Type))
	builder.WriteByte(')')
	return builder.String()
}

// BucketSecrets is a parsable slice of BucketSecret.
type BucketSecrets []*BucketSecret

func (bs BucketSecrets) config(cfg config) {
	for _i := range bs {
		bs[_i].config = cfg
	}
}
