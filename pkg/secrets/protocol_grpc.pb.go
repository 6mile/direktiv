// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package secrets

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SecretsServiceClient is the client API for SecretsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecretsServiceClient interface {
	CreateBucket(ctx context.Context, in *SecretsCreateBucketRequest, opts ...grpc.CallOption) (*SecretsCreateBucketResponse, error)
	DeleteBucket(ctx context.Context, in *SecretsDeleteBucketRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	StoreSecret(ctx context.Context, in *SecretsStoreRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RetrieveSecret(ctx context.Context, in *SecretsRetrieveRequest, opts ...grpc.CallOption) (*SecretsRetrieveResponse, error)
	DeleteSecret(ctx context.Context, in *SecretsDeleteRequest, opts ...grpc.CallOption) (*SecretsDeleteResponse, error)
	GetSecrets(ctx context.Context, in *GetSecretsRequest, opts ...grpc.CallOption) (*GetSecretsResponse, error)
	GetSecretsWithData(ctx context.Context, in *GetSecretsRequest, opts ...grpc.CallOption) (*GetSecretsDataResponse, error)
}

type secretsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretsServiceClient(cc grpc.ClientConnInterface) SecretsServiceClient {
	return &secretsServiceClient{cc}
}

func (c *secretsServiceClient) CreateBucket(ctx context.Context, in *SecretsCreateBucketRequest, opts ...grpc.CallOption) (*SecretsCreateBucketResponse, error) {
	out := new(SecretsCreateBucketResponse)
	err := c.cc.Invoke(ctx, "/secrets.SecretsService/CreateBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsServiceClient) DeleteBucket(ctx context.Context, in *SecretsDeleteBucketRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/secrets.SecretsService/DeleteBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsServiceClient) StoreSecret(ctx context.Context, in *SecretsStoreRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/secrets.SecretsService/StoreSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsServiceClient) RetrieveSecret(ctx context.Context, in *SecretsRetrieveRequest, opts ...grpc.CallOption) (*SecretsRetrieveResponse, error) {
	out := new(SecretsRetrieveResponse)
	err := c.cc.Invoke(ctx, "/secrets.SecretsService/RetrieveSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsServiceClient) DeleteSecret(ctx context.Context, in *SecretsDeleteRequest, opts ...grpc.CallOption) (*SecretsDeleteResponse, error) {
	out := new(SecretsDeleteResponse)
	err := c.cc.Invoke(ctx, "/secrets.SecretsService/DeleteSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsServiceClient) GetSecrets(ctx context.Context, in *GetSecretsRequest, opts ...grpc.CallOption) (*GetSecretsResponse, error) {
	out := new(GetSecretsResponse)
	err := c.cc.Invoke(ctx, "/secrets.SecretsService/GetSecrets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsServiceClient) GetSecretsWithData(ctx context.Context, in *GetSecretsRequest, opts ...grpc.CallOption) (*GetSecretsDataResponse, error) {
	out := new(GetSecretsDataResponse)
	err := c.cc.Invoke(ctx, "/secrets.SecretsService/GetSecretsWithData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretsServiceServer is the server API for SecretsService service.
// All implementations must embed UnimplementedSecretsServiceServer
// for forward compatibility
type SecretsServiceServer interface {
	CreateBucket(context.Context, *SecretsCreateBucketRequest) (*SecretsCreateBucketResponse, error)
	DeleteBucket(context.Context, *SecretsDeleteBucketRequest) (*empty.Empty, error)
	StoreSecret(context.Context, *SecretsStoreRequest) (*empty.Empty, error)
	RetrieveSecret(context.Context, *SecretsRetrieveRequest) (*SecretsRetrieveResponse, error)
	DeleteSecret(context.Context, *SecretsDeleteRequest) (*SecretsDeleteResponse, error)
	GetSecrets(context.Context, *GetSecretsRequest) (*GetSecretsResponse, error)
	GetSecretsWithData(context.Context, *GetSecretsRequest) (*GetSecretsDataResponse, error)
	mustEmbedUnimplementedSecretsServiceServer()
}

// UnimplementedSecretsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSecretsServiceServer struct {
}

func (UnimplementedSecretsServiceServer) CreateBucket(context.Context, *SecretsCreateBucketRequest) (*SecretsCreateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucket not implemented")
}
func (UnimplementedSecretsServiceServer) DeleteBucket(context.Context, *SecretsDeleteBucketRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBucket not implemented")
}
func (UnimplementedSecretsServiceServer) StoreSecret(context.Context, *SecretsStoreRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreSecret not implemented")
}
func (UnimplementedSecretsServiceServer) RetrieveSecret(context.Context, *SecretsRetrieveRequest) (*SecretsRetrieveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveSecret not implemented")
}
func (UnimplementedSecretsServiceServer) DeleteSecret(context.Context, *SecretsDeleteRequest) (*SecretsDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecret not implemented")
}
func (UnimplementedSecretsServiceServer) GetSecrets(context.Context, *GetSecretsRequest) (*GetSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecrets not implemented")
}
func (UnimplementedSecretsServiceServer) GetSecretsWithData(context.Context, *GetSecretsRequest) (*GetSecretsDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecretsWithData not implemented")
}
func (UnimplementedSecretsServiceServer) mustEmbedUnimplementedSecretsServiceServer() {}

// UnsafeSecretsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretsServiceServer will
// result in compilation errors.
type UnsafeSecretsServiceServer interface {
	mustEmbedUnimplementedSecretsServiceServer()
}

func RegisterSecretsServiceServer(s grpc.ServiceRegistrar, srv SecretsServiceServer) {
	s.RegisterService(&SecretsService_ServiceDesc, srv)
}

func _SecretsService_CreateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretsCreateBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsServiceServer).CreateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secrets.SecretsService/CreateBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsServiceServer).CreateBucket(ctx, req.(*SecretsCreateBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsService_DeleteBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretsDeleteBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsServiceServer).DeleteBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secrets.SecretsService/DeleteBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsServiceServer).DeleteBucket(ctx, req.(*SecretsDeleteBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsService_StoreSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretsStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsServiceServer).StoreSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secrets.SecretsService/StoreSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsServiceServer).StoreSecret(ctx, req.(*SecretsStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsService_RetrieveSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretsRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsServiceServer).RetrieveSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secrets.SecretsService/RetrieveSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsServiceServer).RetrieveSecret(ctx, req.(*SecretsRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsService_DeleteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretsDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsServiceServer).DeleteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secrets.SecretsService/DeleteSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsServiceServer).DeleteSecret(ctx, req.(*SecretsDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsService_GetSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsServiceServer).GetSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secrets.SecretsService/GetSecrets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsServiceServer).GetSecrets(ctx, req.(*GetSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsService_GetSecretsWithData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsServiceServer).GetSecretsWithData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/secrets.SecretsService/GetSecretsWithData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsServiceServer).GetSecretsWithData(ctx, req.(*GetSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecretsService_ServiceDesc is the grpc.ServiceDesc for SecretsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecretsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "secrets.SecretsService",
	HandlerType: (*SecretsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBucket",
			Handler:    _SecretsService_CreateBucket_Handler,
		},
		{
			MethodName: "DeleteBucket",
			Handler:    _SecretsService_DeleteBucket_Handler,
		},
		{
			MethodName: "StoreSecret",
			Handler:    _SecretsService_StoreSecret_Handler,
		},
		{
			MethodName: "RetrieveSecret",
			Handler:    _SecretsService_RetrieveSecret_Handler,
		},
		{
			MethodName: "DeleteSecret",
			Handler:    _SecretsService_DeleteSecret_Handler,
		},
		{
			MethodName: "GetSecrets",
			Handler:    _SecretsService_GetSecrets_Handler,
		},
		{
			MethodName: "GetSecretsWithData",
			Handler:    _SecretsService_GetSecretsWithData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/secrets/protocol.proto",
}
